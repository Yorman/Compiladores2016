
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 08 21:17:07 PYT 2016
//----------------------------------------------------

package Tiny;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 08 21:17:07 PYT 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\003\000\002\002\004\000\002\032" +
    "\014\000\002\024\005\000\002\024\003\000\002\024\002" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\022\004\000\002\022\003\000\002" +
    "\026\016\000\002\026\013\000\002\026\016\000\002\026" +
    "\013\000\002\026\015\000\002\026\012\000\002\003\005" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\005\000\002\004\003\000\002\004\003\000\002\005\010" +
    "\000\002\005\012\000\002\006\006\000\002\007\010\000" +
    "\002\021\013\000\002\021\013\000\002\030\007\000\002" +
    "\031\005\000\002\031\003\000\002\031\002\000\002\041" +
    "\002\000\002\010\007\000\002\010\011\000\002\011\005" +
    "\000\002\012\005\000\002\013\005\000\002\013\003\000" +
    "\002\017\005\000\002\017\003\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\005\000\002\015\003\000\002\016\005\000\002" +
    "\016\003\000\002\016\003\000\002\016\006\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\025\003" +
    "\000\002\023\003\000\002\023\003\000\002\027\005\000" +
    "\002\027\003\000\002\027\002\000\002\034\005\000\002" +
    "\035\005\000\002\036\005\000\002\036\003\000\002\037" +
    "\013\000\002\040\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\027\006\001\002\000\004\002\325\001" +
    "\002\000\004\002\001\001\002\000\004\023\007\001\002" +
    "\000\004\060\010\001\002\000\004\037\011\001\002\000" +
    "\010\023\016\030\ufffc\031\ufffc\001\002\000\010\030\ufffb" +
    "\031\ufffb\060\ufffb\001\002\000\006\030\047\031\046\001" +
    "\002\000\010\030\ufff8\031\ufff8\060\ufff8\001\002\000\010" +
    "\030\ufffa\031\ufffa\060\ufffa\001\002\000\010\032\uffbb\057" +
    "\uffbb\061\033\001\002\000\010\030\ufffd\031\ufffd\060\031" +
    "\001\002\000\006\032\uffb2\057\026\001\002\000\010\030" +
    "\ufff9\031\ufff9\060\ufff9\001\002\000\004\032\023\001\002" +
    "\000\006\012\024\013\025\001\002\000\010\030\uffb5\031" +
    "\uffb5\060\uffb5\001\002\000\010\030\uffb4\031\uffb4\060\uffb4" +
    "\001\002\000\004\023\027\001\002\000\006\032\uffbb\057" +
    "\uffbb\001\002\000\004\032\uffb3\001\002\000\010\023\016" +
    "\030\ufffc\031\ufffc\001\002\000\006\030\ufffe\031\ufffe\001" +
    "\002\000\004\055\034\001\002\000\004\024\035\001\002" +
    "\000\004\063\036\001\002\000\004\024\037\001\002\000" +
    "\004\056\040\001\002\000\004\064\041\001\002\000\006" +
    "\012\042\013\043\001\002\000\010\030\uffb1\031\uffb1\060" +
    "\uffb1\001\002\000\010\030\uffb0\031\uffb0\060\uffb0\001\002" +
    "\000\010\030\ufff6\031\ufff6\036\ufff6\001\002\000\010\030" +
    "\047\031\046\036\321\001\002\000\004\023\301\001\002" +
    "\000\006\012\050\013\051\001\002\000\004\023\262\001" +
    "\002\000\004\023\052\001\002\000\004\053\053\001\002" +
    "\000\012\023\027\032\uffb6\054\055\057\uffb6\001\002\000" +
    "\006\032\uffb7\057\uffb7\001\002\000\004\036\256\001\002" +
    "\000\006\032\060\057\057\001\002\000\004\023\027\001" +
    "\002\000\006\012\061\013\063\001\002\000\004\054\uffba" +
    "\001\002\000\004\054\064\001\002\000\004\054\uffb9\001" +
    "\002\000\004\036\065\001\002\000\024\003\101\004\074" +
    "\010\106\011\071\020\072\021\067\022\075\023\076\034" +
    "\105\001\002\000\012\006\uffec\007\uffec\017\uffec\060\uffec" +
    "\001\002\000\004\023\253\001\002\000\012\006\uffeb\007" +
    "\uffeb\017\uffeb\060\uffeb\001\002\000\016\003\124\023\123" +
    "\024\114\025\120\026\117\053\127\001\002\000\026\003" +
    "\124\006\uffe4\007\uffe4\017\uffe4\023\123\024\114\025\120" +
    "\026\117\053\127\060\uffe4\001\002\000\012\006\uffe8\007" +
    "\uffe8\017\uffe8\060\uffe8\001\002\000\016\003\124\023\123" +
    "\024\114\025\120\026\117\053\127\001\002\000\016\003" +
    "\124\023\123\024\114\025\120\026\117\053\127\001\002" +
    "\000\010\040\uffd8\053\222\055\207\001\002\000\012\006" +
    "\uffe6\007\uffe6\017\uffe6\060\uffe6\001\002\000\006\007\220" +
    "\060\112\001\002\000\012\006\uffe3\007\uffe3\017\uffe3\060" +
    "\uffe3\001\002\000\012\006\uffed\007\uffed\017\uffed\060\uffed" +
    "\001\002\000\012\006\uffea\007\uffea\017\uffea\060\uffea\001" +
    "\002\000\012\006\uffe7\007\uffe7\017\uffe7\060\uffe7\001\002" +
    "\000\004\023\166\001\002\000\024\003\101\004\074\010" +
    "\106\011\071\020\072\021\067\022\075\023\076\034\105" +
    "\001\002\000\012\006\uffe9\007\uffe9\017\uffe9\060\uffe9\001" +
    "\002\000\012\006\uffee\007\uffee\017\uffee\060\uffee\001\002" +
    "\000\006\017\113\060\112\001\002\000\024\003\101\004" +
    "\074\010\106\011\071\020\072\021\067\022\075\023\076" +
    "\034\105\001\002\000\016\003\124\023\123\024\114\025" +
    "\120\026\117\053\127\001\002\000\054\005\uffc1\006\uffc1" +
    "\007\uffc1\014\uffc1\017\uffc1\033\uffc1\035\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\054\uffc1\056\uffc1\057\uffc1\060\uffc1\001" +
    "\002\000\054\005\uffc6\006\uffc6\007\uffc6\014\uffc6\017\uffc6" +
    "\033\uffc6\035\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\152\052\151\054\uffc6" +
    "\056\uffc6\057\uffc6\060\uffc6\001\002\000\014\006\uffe0\007" +
    "\uffe0\017\uffe0\035\132\060\uffe0\001\002\000\054\005\uffbe" +
    "\006\uffbe\007\uffbe\014\uffbe\017\uffbe\033\uffbe\035\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\054\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\001\002\000\054\005\uffbd\006\uffbd\007\uffbd\014\uffbd" +
    "\017\uffbd\033\uffbd\035\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\054\uffbd\056\uffbd\057\uffbd\060\uffbd\001\002\000\030\005" +
    "\uffd2\006\uffd2\007\uffd2\014\uffd2\017\uffd2\033\134\035\uffd2" +
    "\054\uffd2\056\uffd2\057\uffd2\060\uffd2\001\002\000\030\005" +
    "\uffd0\006\uffd0\007\uffd0\014\uffd0\017\uffd0\033\uffd0\035\uffd0" +
    "\054\uffd0\056\uffd0\057\uffd0\060\uffd0\001\002\000\056\005" +
    "\uffc0\006\uffc0\007\uffc0\014\uffc0\017\uffc0\033\uffc0\035\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\054\uffc0\055\162\056\uffc0" +
    "\057\uffc0\060\uffc0\001\002\000\054\005\uffbc\006\uffbc\007" +
    "\uffbc\014\uffbc\017\uffbc\033\uffbc\035\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\054\uffbc\056\uffbc\057\uffbc\060\uffbc\001\002" +
    "\000\054\005\uffc3\006\uffc3\007\uffc3\014\uffc3\017\uffc3\033" +
    "\uffc3\035\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\054\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\001\002\000\050\005\uffc9\006\uffc9" +
    "\007\uffc9\014\uffc9\017\uffc9\033\uffc9\035\uffc9\041\136\042" +
    "\137\043\140\044\142\045\144\046\145\047\141\050\143" +
    "\054\uffc9\056\uffc9\057\uffc9\060\uffc9\001\002\000\016\003" +
    "\124\023\123\024\114\025\120\026\117\053\127\001\002" +
    "\000\006\035\132\054\131\001\002\000\054\005\uffc2\006" +
    "\uffc2\007\uffc2\014\uffc2\017\uffc2\033\uffc2\035\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\054\uffc2\056\uffc2\057\uffc2\060\uffc2" +
    "\001\002\000\016\003\124\023\123\024\114\025\120\026" +
    "\117\053\127\001\002\000\030\005\uffd3\006\uffd3\007\uffd3" +
    "\014\uffd3\017\uffd3\033\134\035\uffd3\054\uffd3\056\uffd3\057" +
    "\uffd3\060\uffd3\001\002\000\016\003\124\023\123\024\114" +
    "\025\120\026\117\053\127\001\002\000\030\005\uffd1\006" +
    "\uffd1\007\uffd1\014\uffd1\017\uffd1\033\uffd1\035\uffd1\054\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\001\002\000\016\003\124\023" +
    "\123\024\114\025\120\026\117\053\127\001\002\000\016" +
    "\003\124\023\123\024\114\025\120\026\117\053\127\001" +
    "\002\000\016\003\124\023\123\024\114\025\120\026\117" +
    "\053\127\001\002\000\016\003\124\023\123\024\114\025" +
    "\120\026\117\053\127\001\002\000\016\003\124\023\123" +
    "\024\114\025\120\026\117\053\127\001\002\000\016\003" +
    "\124\023\123\024\114\025\120\026\117\053\127\001\002" +
    "\000\016\003\124\023\123\024\114\025\120\026\117\053" +
    "\127\001\002\000\016\003\124\023\123\024\114\025\120" +
    "\026\117\053\127\001\002\000\034\005\uffcc\006\uffcc\007" +
    "\uffcc\014\uffcc\017\uffcc\033\uffcc\035\uffcc\047\141\050\143" +
    "\054\uffcc\056\uffcc\057\uffcc\060\uffcc\001\002\000\034\005" +
    "\uffcb\006\uffcb\007\uffcb\014\uffcb\017\uffcb\033\uffcb\035\uffcb" +
    "\047\141\050\143\054\uffcb\056\uffcb\057\uffcb\060\uffcb\001" +
    "\002\000\054\005\uffc7\006\uffc7\007\uffc7\014\uffc7\017\uffc7" +
    "\033\uffc7\035\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\152\052\151\054\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\001\002\000\016\003\124\023" +
    "\123\024\114\025\120\026\117\053\127\001\002\000\016" +
    "\003\124\023\123\024\114\025\120\026\117\053\127\001" +
    "\002\000\054\005\uffc5\006\uffc5\007\uffc5\014\uffc5\017\uffc5" +
    "\033\uffc5\035\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\001\002\000\054\005\uffc4\006" +
    "\uffc4\007\uffc4\014\uffc4\017\uffc4\033\uffc4\035\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\054\uffc4\056\uffc4\057\uffc4\060\uffc4" +
    "\001\002\000\034\005\uffca\006\uffca\007\uffca\014\uffca\017" +
    "\uffca\033\uffca\035\uffca\047\141\050\143\054\uffca\056\uffca" +
    "\057\uffca\060\uffca\001\002\000\054\005\uffc8\006\uffc8\007" +
    "\uffc8\014\uffc8\017\uffc8\033\uffc8\035\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\152\052\151\054\uffc8\056\uffc8\057\uffc8\060\uffc8\001\002" +
    "\000\034\005\uffce\006\uffce\007\uffce\014\uffce\017\uffce\033" +
    "\uffce\035\uffce\047\141\050\143\054\uffce\056\uffce\057\uffce" +
    "\060\uffce\001\002\000\034\005\uffcf\006\uffcf\007\uffcf\014" +
    "\uffcf\017\uffcf\033\uffcf\035\uffcf\047\141\050\143\054\uffcf" +
    "\056\uffcf\057\uffcf\060\uffcf\001\002\000\034\005\uffcd\006" +
    "\uffcd\007\uffcd\014\uffcd\017\uffcd\033\uffcd\035\uffcd\047\141" +
    "\050\143\054\uffcd\056\uffcd\057\uffcd\060\uffcd\001\002\000" +
    "\016\003\124\023\123\024\114\025\120\026\117\053\127" +
    "\001\002\000\006\035\132\056\164\001\002\000\054\005" +
    "\uffbf\006\uffbf\007\uffbf\014\uffbf\017\uffbf\033\uffbf\035\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\001\002\000\012\006\uffef\007\uffef\017\uffef\060" +
    "\uffef\001\002\000\006\040\uffd8\055\207\001\002\000\006" +
    "\015\171\016\170\001\002\000\004\024\200\001\002\000" +
    "\004\024\172\001\002\000\004\014\173\001\002\000\004" +
    "\036\174\001\002\000\024\003\101\004\074\010\106\011" +
    "\071\020\072\021\067\022\075\023\076\034\105\001\002" +
    "\000\006\007\176\060\112\001\002\000\004\060\177\001" +
    "\002\000\012\006\uffdd\007\uffdd\017\uffdd\060\uffdd\001\002" +
    "\000\004\014\201\001\002\000\004\036\202\001\002\000" +
    "\024\003\101\004\074\010\106\011\071\020\072\021\067" +
    "\022\075\023\076\034\105\001\002\000\006\007\204\060" +
    "\112\001\002\000\004\060\205\001\002\000\012\006\uffde" +
    "\007\uffde\017\uffde\060\uffde\001\002\000\004\040\215\001" +
    "\002\000\016\003\124\023\123\024\114\025\120\026\117" +
    "\053\127\001\002\000\006\035\132\056\211\001\002\000" +
    "\004\040\212\001\002\000\016\003\124\023\123\024\114" +
    "\025\120\026\117\053\127\001\002\000\006\035\132\060" +
    "\214\001\002\000\016\006\uffd6\007\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\060\uffd6\001\002\000\016\003\124\023\123\024" +
    "\114\025\120\026\117\053\127\001\002\000\006\035\132" +
    "\060\217\001\002\000\016\006\uffd7\007\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\060\uffd7\001\002\000\004\060\221\001\002" +
    "\000\010\030\ufff3\031\ufff3\036\ufff3\001\002\000\022\003" +
    "\124\023\123\024\114\025\120\026\117\053\127\054\uffd9" +
    "\057\uffd9\001\002\000\010\035\132\054\uffda\057\uffda\001" +
    "\002\000\006\054\226\057\225\001\002\000\016\003\124" +
    "\023\123\024\114\025\120\026\117\053\127\001\002\000" +
    "\004\060\227\001\002\000\012\006\uffdc\007\uffdc\017\uffdc" +
    "\060\uffdc\001\002\000\010\035\132\054\uffdb\057\uffdb\001" +
    "\002\000\006\035\132\060\232\001\002\000\012\006\uffd4" +
    "\007\uffd4\017\uffd4\060\uffd4\001\002\000\006\005\234\035" +
    "\132\001\002\000\024\003\101\004\074\010\106\011\071" +
    "\020\072\021\067\022\075\023\076\034\105\001\002\000" +
    "\010\006\236\007\237\060\112\001\002\000\024\003\101" +
    "\004\074\010\106\011\071\020\072\021\067\022\075\023" +
    "\076\034\105\001\002\000\004\060\240\001\002\000\012" +
    "\006\uffe2\007\uffe2\017\uffe2\060\uffe2\001\002\000\006\007" +
    "\242\060\112\001\002\000\004\060\243\001\002\000\012" +
    "\006\uffe1\007\uffe1\017\uffe1\060\uffe1\001\002\000\006\035" +
    "\132\060\245\001\002\000\012\006\uffe5\007\uffe5\017\uffe5" +
    "\060\uffe5\001\002\000\006\014\247\035\132\001\002\000" +
    "\024\003\101\004\074\010\106\011\071\020\072\021\067" +
    "\022\075\023\076\034\105\001\002\000\006\007\251\060" +
    "\112\001\002\000\004\060\252\001\002\000\012\006\uffdf" +
    "\007\uffdf\017\uffdf\060\uffdf\001\002\000\004\060\254\001" +
    "\002\000\012\006\uffd5\007\uffd5\017\uffd5\060\uffd5\001\002" +
    "\000\006\032\uffb8\057\uffb8\001\002\000\024\003\101\004" +
    "\074\010\106\011\071\020\072\021\067\022\075\023\076" +
    "\034\105\001\002\000\006\007\260\060\112\001\002\000" +
    "\004\060\261\001\002\000\010\030\ufff2\031\ufff2\036\ufff2" +
    "\001\002\000\004\053\263\001\002\000\012\023\027\032" +
    "\uffb6\054\264\057\uffb6\001\002\000\004\036\275\001\002" +
    "\000\006\032\266\057\057\001\002\000\006\012\061\013" +
    "\063\001\002\000\004\054\270\001\002\000\004\036\271" +
    "\001\002\000\024\003\101\004\074\010\106\011\071\020" +
    "\072\021\067\022\075\023\076\034\105\001\002\000\006" +
    "\007\273\060\112\001\002\000\004\060\274\001\002\000" +
    "\010\030\ufff5\031\ufff5\036\ufff5\001\002\000\024\003\101" +
    "\004\074\010\106\011\071\020\072\021\067\022\075\023" +
    "\076\034\105\001\002\000\006\007\277\060\112\001\002" +
    "\000\004\060\300\001\002\000\010\030\ufff4\031\ufff4\036" +
    "\ufff4\001\002\000\004\053\302\001\002\000\012\023\027" +
    "\032\uffb6\054\303\057\uffb6\001\002\000\004\036\314\001" +
    "\002\000\006\032\305\057\057\001\002\000\006\012\061" +
    "\013\063\001\002\000\004\054\307\001\002\000\004\036" +
    "\310\001\002\000\024\003\101\004\074\010\106\011\071" +
    "\020\072\021\067\022\075\023\076\034\105\001\002\000" +
    "\006\007\312\060\112\001\002\000\004\060\313\001\002" +
    "\000\010\030\ufff1\031\ufff1\036\ufff1\001\002\000\024\003" +
    "\101\004\074\010\106\011\071\020\072\021\067\022\075" +
    "\023\076\034\105\001\002\000\006\007\316\060\112\001" +
    "\002\000\004\060\317\001\002\000\010\030\ufff0\031\ufff0" +
    "\036\ufff0\001\002\000\010\030\ufff7\031\ufff7\036\ufff7\001" +
    "\002\000\024\003\101\004\074\010\106\011\071\020\072" +
    "\021\067\022\075\023\076\034\105\001\002\000\006\007" +
    "\323\060\112\001\002\000\004\062\324\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\002\003\032\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\024\012\025\017\033\016\034" +
    "\011\035\014\036\021\037\020\040\013\001\001\000\002" +
    "\001\001\000\006\022\044\026\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\017\036\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\024\031\025\017\033\016\034\011\035\014" +
    "\036\021\037\020\040\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\053\027\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\254\001\001" +
    "\000\004\023\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\077" +
    "\004\107\005\101\006\065\007\067\010\106\011\072\012" +
    "\103\021\102\030\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\245\014\125\015" +
    "\114\016\124\017\120\020\121\001\001\000\016\013\243" +
    "\014\125\015\114\016\124\017\120\020\121\001\001\000" +
    "\002\001\001\000\016\013\232\014\125\015\114\016\124" +
    "\017\120\020\121\001\001\000\016\013\230\014\125\015" +
    "\114\016\124\017\120\020\121\001\001\000\004\041\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\166\001\001\000\026\003\110\004\107\005" +
    "\101\006\065\007\067\010\106\011\072\012\103\021\102" +
    "\030\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\164\005\101\006\065\007\067" +
    "\010\106\011\072\012\103\021\102\030\076\001\001\000" +
    "\016\013\115\014\125\015\114\016\124\017\120\020\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\013\127\014\125" +
    "\015\114\016\124\017\120\020\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\125\015\114\016\124" +
    "\017\132\020\121\001\001\000\002\001\001\000\012\014" +
    "\125\015\114\016\124\020\134\001\001\000\002\001\001" +
    "\000\010\014\160\015\114\016\124\001\001\000\010\014" +
    "\157\015\114\016\124\001\001\000\010\014\156\015\114" +
    "\016\124\001\001\000\006\015\155\016\124\001\001\000" +
    "\010\014\154\015\114\016\124\001\001\000\006\015\147" +
    "\016\124\001\001\000\010\014\146\015\114\016\124\001" +
    "\001\000\010\014\145\015\114\016\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\153\001\001\000\004\016\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\162\014\125\015\114\016\124\017\120\020\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\174\004\107\005\101\006\065\007\067\010" +
    "\106\011\072\012\103\021\102\030\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\202\004\107\005\101" +
    "\006\065\007\067\010\106\011\072\012\103\021\102\030" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\207\014\125\015" +
    "\114\016\124\017\120\020\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\212\014\125\015\114\016" +
    "\124\017\120\020\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\215\014\125\015\114\016\124\017" +
    "\120\020\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\222\014" +
    "\125\015\114\016\124\017\120\020\121\031\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\227\014" +
    "\125\015\114\016\124\017\120\020\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\234" +
    "\004\107\005\101\006\065\007\067\010\106\011\072\012" +
    "\103\021\102\030\076\001\001\000\002\001\001\000\026" +
    "\003\240\004\107\005\101\006\065\007\067\010\106\011" +
    "\072\012\103\021\102\030\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\247\004\107\005\101\006\065\007" +
    "\067\010\106\011\072\012\103\021\102\030\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\256\004\107\005\101\006\065\007\067\010\106\011" +
    "\072\012\103\021\102\030\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\053\027\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\271\004\107\005\101\006\065" +
    "\007\067\010\106\011\072\012\103\021\102\030\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\275\004\107\005\101\006\065\007\067\010" +
    "\106\011\072\012\103\021\102\030\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\053\027\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\310\004\107\005\101" +
    "\006\065\007\067\010\106\011\072\012\103\021\102\030" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\314\004\107\005\101\006\065\007" +
    "\067\010\106\011\072\012\103\021\102\030\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\321\004\107\005\101\006\065" +
    "\007\067\010\106\011\072\012\103\021\102\030\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	/***********
	SymbolFactory es una nueva caracteristica que ha sido añadida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
	, esto debido a que dicha clase no provee mucha información de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
	Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
	***********/
		public static void main(String args[]) throws Exception {
			SymbolFactory sf = new DefaultSymbolFactory();
			parser parser_obj;
			if (args.length==0) 
				parser_obj=new parser(new Scanner(System.in,sf),sf);
			else 
				parser_obj=new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);

			parser_obj.parse();
			NodoBase root=parser_obj.action_obj.getASTroot();
			System.out.println();
			System.out.println("IMPRESION DEL AST GENERADO");
			System.out.println();
			ast.Util.imprimirAST(root);
			TablaSimbolos ts = new TablaSimbolos();
			ts.cargarTabla(root);
			ts.ImprimirClaves();
			Tiny.Generador.setTablaSimbolos(ts);
			Tiny.Generador.generarCodigoObjeto(root);
		}

	
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


		private boolean debug=true;
		private NodoBase ast=null;
		private int lineanum=0;
		
		//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
		public NodoBase getASTroot(){
			return ast;
		}
		
	
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // vboo ::= ID ARRAY BRALEFT NUM PUN NUM BRARIGHT OF BOOLEAN 
            {
              NodoBase RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String variables = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer ni = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ndleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer nd = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(debug) System.out.println("\t regla 29");
																			RESULT= new NodoIdentificador(variables.toString(),nd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vboo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // vint ::= ID ARRAY BRALEFT NUM PUN NUM BRARIGHT OF INTEGER 
            {
              NodoBase RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String variables = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer ni = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ndleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer nd = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(debug) System.out.println("\t regla 28");
																			RESULT= new NodoIdentificador(variables.toString(),nd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vint",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // var_list ::= decl 
            {
              NodoBase RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase vari = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(debug) System.out.println("\t regla 27b"); RESULT = vari; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // var_list ::= decl COMMA var_list 
            {
              NodoBase RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase vari = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase varlist = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 27a");
												NodoBase hijoActual = vari;
							if(hijoActual !=null){
								while(hijoActual.TieneHermano()){
									hijoActual = hijoActual.getHermanoDerecha();
								}
								hijoActual.setHermanoDerecha(varlist);
								RESULT=vari;
							}else{
								RESULT=varlist;
							}
					
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // boo_dec ::= var_list PUNTOS BOOLEAN 
            {
              NodoBase RESULT =null;
		int varlisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase varlis = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 26");
					RESULT = new NodoDeclaracion("Boolean",varlis);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boo_dec",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // int_dec ::= var_list PUNTOS INTEGER 
            {
              NodoBase RESULT =null;
		int varlisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase varlis = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 25");
					RESULT = new NodoDeclaracion("Integer",varlis); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_dec",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arg_list ::= 
            {
              NodoBase RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // arg_list ::= decl 
            {
              NodoBase RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 24b");RESULT = ar; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // arg_list ::= arg_list COMMA decl 
            {
              NodoBase RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase lista = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 24a");
												NodoBase hijoActual = lista;
							if(hijoActual !=null){
								while(hijoActual.TieneHermano()){
									hijoActual = hijoActual.getHermanoDerecha();
								}
								hijoActual.setHermanoDerecha(ar);
								RESULT=lista;
							}else{
								RESULT=ar;
							}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type ::= BOOLEAN 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t regla 23b");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type ::= INTEGER 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t regla 23a");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // decl ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 22"); RESULT = new NodoIdentificador(variable.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= error 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t regla 21g");
					if(debug)
						//System.out.println("Ocurrio error en cup factor");
					RESULT=null;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= FALSE 
            {
              NodoBase RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean f = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(debug) System.out.println("\t regla 21f");RESULT= new NodoValor(0,1);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= TRUE 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(debug) System.out.println("\t regla 21e");RESULT= new NodoValor(1,1);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= ID BRALEFT exp BRARIGHT 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(debug) System.out.println("\t regla 21d");RESULT=new NodoIdentificador(variable,ex,null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(debug) System.out.println("\t regla 21c");
								if(variable!=null){
						if(debug)
							System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
						}else{
							RESULT = null;
					}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 21b");
								if(valor!=null){
									RESULT= new NodoValor(valor);					
								}else{
									RESULT = null;
					}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 21a"); RESULT = ex;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 20c");RESULT = ex;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 20b");RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 20a"); RESULT = new NodoOperacion(exI,tipoOp.por,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(debug) System.out.println("\t regla 19c");RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 19b");RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(debug) System.out.println("\t regla 19a");RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp_logica ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(debug) System.out.println("\t regla 18g");RESULT = ex;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp_logica ::= simple_exp LE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 18f");RESULT = new NodoOperacion(exI,tipoOp.menor_igual,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp_logica ::= simple_exp GE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 18e");RESULT = new NodoOperacion(exI,tipoOp.mayor_igual,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp_logica ::= simple_exp NE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 18d");RESULT = new NodoOperacion(exI,tipoOp.dif,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp_logica ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 18c");RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp_logica ::= simple_exp GT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 18b");RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp_logica ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 18a"); RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp_and ::= exp_logica 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 17b"); RESULT = ex;
																   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_and",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp_and ::= exp_and AND exp_logica 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 17a"); RESULT = new NodoOperacion(exI,tipoOp.and,exD);
																   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_and",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp_and 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 16b"); RESULT = ex;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp OR exp_and 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 16a"); RESULT = new NodoOperacion(exI,tipoOp.or,exD);
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // write_stmt ::= WRITE exp SEMI 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 15"); RESULT= new NodoEscribir(ex);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // read_stmt ::= READ ID SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 14"); System.out.println("Leyendo Variable");
					if(variable!=null)
						RESULT = new NodoLeer(variable.toString());
					else{
						RESULT = null;if(debug)
						System.out.println("Ocurrio error en cup # 0002");
					}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assign_stmt ::= ID BRALEFT exp BRARIGHT ASSIGN exp SEMI 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase i = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ee = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 13b"); RESULT=new NodoAsignacion(var,ee);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assign_stmt ::= ID NT$0 ASSIGN exp SEMI 
            {
              NodoBase RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(variable!=null)
										RESULT = new NodoAsignacion(variable.toString(),ex);
									else{
										RESULT = null;
									
					}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$0 ::= 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(debug) System.out.println("\t regla 13a");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // list ::= 
            {
              NodoBase RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // list ::= exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 12b"); RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // list ::= list COMMA exp 
            {
              NodoBase RESULT =null;
		int lisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase lis = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 12a");
														NodoBase hijoActual = lis;
							if(hijoActual !=null){
								while(hijoActual.TieneHermano()){
									hijoActual = hijoActual.getHermanoDerecha();
								}
								hijoActual.setHermanoDerecha(ex);
								RESULT=lis;
							}else{
								RESULT=ex;
							}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // call_fun ::= ID LPAREN list RPAREN SEMI 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase li = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(debug) System.out.println("\t regla 11a");
																RESULT = new NodoCall(var,li);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_fun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // for_stmt ::= FOR assign_stmt DT NUM DO BEGIN stmt_seq END SEMI 
            {
              NodoBase RESULT =null;
		int astleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int astright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase ast = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer nu = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ss = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 10b"); 
																								RESULT = new NodoFor(ast,nu,ss);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // for_stmt ::= FOR assign_stmt TO NUM DO BEGIN stmt_seq END SEMI 
            {
              NodoBase RESULT =null;
		int astleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int astright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase ast = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer nu = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ss = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 10a"); 
																				RESULT = new NodoFor(ast,nu,ss);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // while_stmt ::= WHILE exp DO stmt_seq END SEMI 
            {
              NodoBase RESULT =null;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 9");
																		RESULT = new NodoWhile(prueba,cuerpo);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 8");
																		RESULT = new NodoRepeat(cuerpo,prueba);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END SEMI 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
				if(debug) System.out.println("\t regla 7b");
																					RESULT = new NodoIf(ex,pthen,pelse);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if_stmt ::= IF exp THEN stmt_seq END SEMI 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 7a");
																RESULT = new NodoIf(ex,pthen);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= error 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t regla 6k"); RESULT=null;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= RETURN 
            {
              NodoBase RESULT =null;
			if(debug) System.out.println("\t regla 6j"); RESULT = new NodoReturn(null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= RETURN exp SEMI 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				if(debug) System.out.println("\t regla 6i"); RESULT = new NodoReturn(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= call_fun 
            {
              NodoBase RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 6h"); RESULT = cf;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 6g"); RESULT = sesc;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 6f"); RESULT = slec;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 6e"); RESULT = sasi;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fs = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 6d"); RESULT = fs;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= while_stmt 
            {
              NodoBase RESULT =null;
		int wrepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wrepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase wrep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 6c"); RESULT = wrep;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 6b"); RESULT = srep;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 6a"); RESULT = sif;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt_seq ::= stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
						if(debug) System.out.println("\t regla 5b");
											RESULT = sent;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt_seq ::= stmt_seq SEMI stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 5a");
													NodoBase hijoActual = ini;
							if(hijoActual !=null){
								while(hijoActual.TieneHermano()){
									hijoActual = hijoActual.getHermanoDerecha();
								}
								hijoActual.setHermanoDerecha(sent);
								RESULT=ini;
							}else{
								RESULT=sent;
							}
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= PROCEDURE ID LPAREN RPAREN BEGIN stmt_seq END SEMI 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 4f");
				RESULT = new NodoFuncion("Procedure",var,st);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= PROCEDURE ID LPAREN arg_list PUNTOS type RPAREN BEGIN stmt_seq END SEMI 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase args = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ti = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  if(debug) System.out.println("\t regla 4e");
			  RESULT = new NodoFuncion("Procedure",var,args,st);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= FUNCTION BOOLEAN ID LPAREN RPAREN BEGIN stmt_seq END SEMI 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 4d");
						RESULT = new NodoFuncion("Boolean",var,st);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function ::= FUNCTION BOOLEAN ID LPAREN arg_list PUNTOS type RPAREN BEGIN stmt_seq END SEMI 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase args = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ti = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 4c"); 
					RESULT = new NodoFuncion("Boolean",var,args,st);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= FUNCTION INTEGER ID LPAREN RPAREN BEGIN stmt_seq END SEMI 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 4b"); 
					RESULT = new NodoFuncion("Int",var,st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function ::= FUNCTION INTEGER ID LPAREN arg_list PUNTOS type RPAREN BEGIN stmt_seq END SEMI 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase args = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ti = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 4a");
						RESULT = new NodoFuncion("Int",var,args,st);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function_stmt ::= function 
            {
              NodoBase RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fun = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3b");
										RESULT = fun;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_stmt ::= function_stmt function 
            {
              NodoBase RESULT =null;
		int funsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase funs = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fun = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
									if(debug) System.out.println("\t regla 3a");
							NodoBase hijoActual = funs;
							if(hijoActual !=null){
								while(hijoActual.TieneHermano()){
									hijoActual = hijoActual.getHermanoDerecha();
								}
								hijoActual.setHermanoDerecha(fun);
								RESULT=funs;
							}else{
								RESULT=fun;
							}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_decl ::= vboo 
            {
              NodoBase RESULT =null;
		int vbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase vb = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 2d"); RESULT= vb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_decl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo_decl ::= vint 
            {
              NodoBase RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase vv = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 2c"); RESULT = vv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_decl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo_decl ::= boo_dec 
            {
              NodoBase RESULT =null;
		int inbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase inb = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 2b");RESULT = inb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_decl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipo_decl ::= int_dec 
            {
              NodoBase RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int indright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ind = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 2a"); RESULT= ind; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_decl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_var ::= 
            {
              NodoBase RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_var ::= tipo_decl 
            {
              NodoBase RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase vari = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 1b"); 
					RESULT = vari; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_var ::= tipo_decl SEMI decl_var 
            {
              NodoBase RESULT =null;
		int varialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase varia = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase lista = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 1a");
													NodoBase hijoActual = varia;
							if(hijoActual !=null){
								while(hijoActual.TieneHermano()){
									hijoActual = hijoActual.getHermanoDerecha();
								}
								hijoActual.setHermanoDerecha(lista);
								RESULT=varia;
							}else{
								RESULT=lista;
							}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // struct_stmt ::= PROGRAM ID SEMI VAR decl_var function_stmt BEGIN stmt_seq END PU 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase lista = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase fun = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
							if(debug) System.out.println("\t regla 0");
										
						RESULT= new NodoPrograma(variable,lista,fun,s);										
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= struct_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						ast = s;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

