
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 26 16:16:18 VET 2015
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 26 16:16:18 VET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\003\000\002\002\004\000\002\031" +
    "\006\000\002\024\004\000\002\024\002\000\002\025\012" +
    "\000\002\025\011\000\002\025\012\000\002\025\011\000" +
    "\002\025\012\000\002\025\011\000\002\026\005\000\002" +
    "\026\003\000\002\027\004\000\002\027\004\000\002\030" +
    "\005\000\002\030\003\000\002\003\005\000\002\003\002" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\004" +
    "\006\000\002\004\004\000\002\004\003\000\002\004\003" +
    "\000\002\005\007\000\002\005\011\000\002\006\006\000" +
    "\002\034\002\000\002\007\006\000\002\007\005\000\002" +
    "\010\004\000\002\010\004\000\002\011\004\000\002\012" +
    "\005\000\002\012\003\000\002\013\005\000\002\013\003" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\003\000\002\015\005\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\003" +
    "\000\002\017\005\000\002\017\003\000\002\017\003\000" +
    "\002\017\006\000\002\017\006\000\002\017\004\000\002" +
    "\017\004\000\002\017\005\000\002\017\006\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\021\004" +
    "\000\002\022\004\000\002\020\005\000\002\020\003\000" +
    "\002\033\003\000\002\033\006\000\002\032\006\000\002" +
    "\023\014\000\002\023\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\012\036\012\037\010\042\ufffd\044\007\001" +
    "\002\000\004\002\257\001\002\000\012\036\012\037\010" +
    "\042\ufffd\044\007\001\002\000\004\002\001\001\002\000" +
    "\004\014\243\001\002\000\004\014\230\001\002\000\004" +
    "\042\225\001\002\000\004\014\013\001\002\000\004\033" +
    "\014\001\002\000\010\034\015\036\021\037\017\001\002" +
    "\000\004\042\222\001\002\000\006\034\ufff5\040\220\001" +
    "\002\000\004\014\217\001\002\000\004\034\023\001\002" +
    "\000\004\014\022\001\002\000\006\034\ufff4\040\ufff4\001" +
    "\002\000\004\042\024\001\002\000\032\003\043\004\035" +
    "\007\uffef\010\047\012\026\013\037\014\040\035\uffb3\036" +
    "\030\037\041\041\046\043\033\001\002\000\004\035\uffed" +
    "\001\002\000\004\014\215\001\002\000\004\035\uffe9\001" +
    "\002\000\004\014\165\001\002\000\004\035\uffe8\001\002" +
    "\000\004\035\uffeb\001\002\000\022\003\067\014\066\015" +
    "\056\030\057\033\072\035\uffe3\045\063\046\062\001\002" +
    "\000\004\016\211\001\002\000\020\003\067\014\066\015" +
    "\056\030\057\033\072\045\063\046\062\001\002\000\004" +
    "\035\uffe7\001\002\000\020\003\067\014\066\015\056\030" +
    "\057\033\072\045\063\046\062\001\002\000\010\016\uffde" +
    "\033\175\047\157\001\002\000\004\014\165\001\002\000" +
    "\004\007\164\001\002\000\004\035\uffe2\001\002\000\004" +
    "\035\uffee\001\002\000\004\035\uffea\001\002\000\004\033" +
    "\144\001\002\000\032\003\043\004\035\010\047\011\uffef" +
    "\012\026\013\037\014\040\035\uffb3\036\030\037\041\041" +
    "\046\043\033\001\002\000\004\035\052\001\002\000\004" +
    "\035\uffec\001\002\000\036\003\043\004\035\006\uffef\007" +
    "\uffef\010\047\011\uffef\012\026\013\037\014\040\035\uffb3" +
    "\036\030\037\041\041\046\043\033\001\002\000\010\006" +
    "\ufff0\007\ufff0\011\ufff0\001\002\000\004\011\055\001\002" +
    "\000\020\003\067\014\066\015\056\030\057\033\072\045" +
    "\063\046\062\001\002\000\044\005\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\034\uffc6\035\uffc6\040\uffc6" +
    "\050\uffc6\001\002\000\010\014\140\015\137\033\141\001" +
    "\002\000\044\005\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\114\032\113\034\uffcb\035\uffcb\040\uffcb\050\uffcb\001\002" +
    "\000\006\026\075\035\uffdf\001\002\000\044\005\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\034\uffbe\035" +
    "\uffbe\040\uffbe\050\uffbe\001\002\000\044\005\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\034\uffbd\035\uffbd" +
    "\040\uffbd\050\uffbd\001\002\000\020\005\uffd7\025\077\026" +
    "\uffd7\034\uffd7\035\uffd7\040\uffd7\050\uffd7\001\002\000\020" +
    "\005\uffd5\025\uffd5\026\uffd5\034\uffd5\035\uffd5\040\uffd5\050" +
    "\uffd5\001\002\000\050\005\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\126\034\uffc5\035\uffc5\040\uffc5" +
    "\047\125\050\uffc5\001\002\000\044\005\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\034\uffbc\035\uffbc\040" +
    "\uffbc\050\uffbc\001\002\000\044\005\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\034\uffc8\035\uffc8\040\uffc8" +
    "\050\uffc8\001\002\000\040\005\uffce\017\101\020\102\021" +
    "\103\022\105\023\106\024\110\025\uffce\026\uffce\027\104" +
    "\030\107\034\uffce\035\uffce\040\uffce\050\uffce\001\002\000" +
    "\020\003\067\014\066\015\056\030\057\033\072\045\063" +
    "\046\062\001\002\000\006\026\075\034\074\001\002\000" +
    "\044\005\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\034\uffc7\035\uffc7\040\uffc7\050\uffc7\001\002\000\020" +
    "\003\067\014\066\015\056\030\057\033\072\045\063\046" +
    "\062\001\002\000\020\005\uffd8\025\077\026\uffd8\034\uffd8" +
    "\035\uffd8\040\uffd8\050\uffd8\001\002\000\020\003\067\014" +
    "\066\015\056\030\057\033\072\045\063\046\062\001\002" +
    "\000\020\005\uffd6\025\uffd6\026\uffd6\034\uffd6\035\uffd6\040" +
    "\uffd6\050\uffd6\001\002\000\020\003\067\014\066\015\056" +
    "\030\057\033\072\045\063\046\062\001\002\000\020\003" +
    "\067\014\066\015\056\030\057\033\072\045\063\046\062" +
    "\001\002\000\020\003\067\014\066\015\056\030\057\033" +
    "\072\045\063\046\062\001\002\000\020\003\067\014\066" +
    "\015\056\030\057\033\072\045\063\046\062\001\002\000" +
    "\020\003\067\014\066\015\056\030\057\033\072\045\063" +
    "\046\062\001\002\000\020\003\067\014\066\015\056\030" +
    "\057\033\072\045\063\046\062\001\002\000\020\003\067" +
    "\014\066\015\056\030\057\033\072\045\063\046\062\001" +
    "\002\000\020\003\067\014\066\015\056\030\057\033\072" +
    "\045\063\046\062\001\002\000\024\005\uffd1\025\uffd1\026" +
    "\uffd1\027\104\030\107\034\uffd1\035\uffd1\040\uffd1\050\uffd1" +
    "\001\002\000\044\005\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\114\032\113\034\uffcc\035\uffcc\040\uffcc\050\uffcc\001" +
    "\002\000\020\003\067\014\066\015\056\030\057\033\072" +
    "\045\063\046\062\001\002\000\020\003\067\014\066\015" +
    "\056\030\057\033\072\045\063\046\062\001\002\000\044" +
    "\005\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\034\uffca\035\uffca\040\uffca\050\uffca\001\002\000\044\005" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\034" +
    "\uffc9\035\uffc9\040\uffc9\050\uffc9\001\002\000\024\005\uffd0" +
    "\025\uffd0\026\uffd0\027\104\030\107\034\uffd0\035\uffd0\040" +
    "\uffd0\050\uffd0\001\002\000\024\005\uffcf\025\uffcf\026\uffcf" +
    "\027\104\030\107\034\uffcf\035\uffcf\040\uffcf\050\uffcf\001" +
    "\002\000\044\005\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\114\032\113\034\uffcd\035\uffcd\040\uffcd\050\uffcd\001\002" +
    "\000\024\005\uffd3\025\uffd3\026\uffd3\027\104\030\107\034" +
    "\uffd3\035\uffd3\040\uffd3\050\uffd3\001\002\000\024\005\uffd4" +
    "\025\uffd4\026\uffd4\027\104\030\107\034\uffd4\035\uffd4\040" +
    "\uffd4\050\uffd4\001\002\000\024\005\uffd2\025\uffd2\026\uffd2" +
    "\027\104\030\107\034\uffd2\035\uffd2\040\uffd2\050\uffd2\001" +
    "\002\000\020\003\067\014\066\015\056\030\057\033\072" +
    "\045\063\046\062\001\002\000\022\003\067\014\066\015" +
    "\056\030\057\033\072\034\130\045\063\046\062\001\002" +
    "\000\010\026\075\034\ufff1\040\133\001\002\000\044\005" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\034" +
    "\uffc0\035\uffc0\040\uffc0\050\uffc0\001\002\000\004\034\132" +
    "\001\002\000\044\005\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\034\uffbf\035\uffbf\040\uffbf\050\uffbf\001" +
    "\002\000\020\003\067\014\066\015\056\030\057\033\072" +
    "\045\063\046\062\001\002\000\004\034\ufff2\001\002\000" +
    "\006\026\075\050\136\001\002\000\044\005\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\034\uffc4\035\uffc4" +
    "\040\uffc4\050\uffc4\001\002\000\044\005\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\034\uffc2\035\uffc2\040" +
    "\uffc2\050\uffc2\001\002\000\044\005\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\034\uffc1\035\uffc1\040\uffc1" +
    "\050\uffc1\001\002\000\020\003\067\014\066\015\056\030" +
    "\057\033\072\045\063\046\062\001\002\000\010\027\104" +
    "\030\107\034\143\001\002\000\044\005\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3\040" +
    "\uffc3\050\uffc3\001\002\000\004\014\145\001\002\000\006" +
    "\016\uffde\047\157\001\002\000\004\035\147\001\002\000" +
    "\020\003\067\014\066\015\056\030\057\033\072\045\063" +
    "\046\062\001\002\000\006\026\075\035\151\001\002\000" +
    "\004\014\145\001\002\000\004\034\153\001\002\000\032" +
    "\003\043\004\035\007\uffef\010\047\012\026\013\037\014" +
    "\040\035\uffb3\036\030\037\041\041\046\043\033\001\002" +
    "\000\004\007\155\001\002\000\004\035\uffb4\001\002\000" +
    "\004\016\162\001\002\000\020\003\067\014\066\015\056" +
    "\030\057\033\072\045\063\046\062\001\002\000\006\026" +
    "\075\050\161\001\002\000\006\016\uffb5\035\uffb5\001\002" +
    "\000\020\003\067\014\066\015\056\030\057\033\072\045" +
    "\063\046\062\001\002\000\010\026\075\034\uffdd\035\uffdd" +
    "\001\002\000\012\036\ufffa\037\ufffa\042\ufffa\044\ufffa\001" +
    "\002\000\010\035\uffb7\040\uffb7\047\172\001\002\000\004" +
    "\035\uffba\001\002\000\006\035\uffb8\040\170\001\002\000" +
    "\004\014\165\001\002\000\004\035\uffb9\001\002\000\004" +
    "\015\173\001\002\000\004\050\174\001\002\000\006\035" +
    "\uffb6\040\uffb6\001\002\000\022\003\067\014\066\015\056" +
    "\030\057\033\072\034\176\045\063\046\062\001\002\000" +
    "\004\035\uffe6\001\002\000\004\034\200\001\002\000\004" +
    "\035\uffe5\001\002\000\006\026\075\035\uffd9\001\002\000" +
    "\006\005\203\026\075\001\002\000\034\003\043\004\035" +
    "\006\uffef\007\uffef\010\047\012\026\013\037\014\040\035" +
    "\uffb3\036\030\037\041\041\046\043\033\001\002\000\006" +
    "\006\205\007\206\001\002\000\032\003\043\004\035\007" +
    "\uffef\010\047\012\026\013\037\014\040\035\uffb3\036\030" +
    "\037\041\041\046\043\033\001\002\000\004\035\uffe1\001" +
    "\002\000\004\007\210\001\002\000\004\035\uffe0\001\002" +
    "\000\020\003\067\014\066\015\056\030\057\033\072\045" +
    "\063\046\062\001\002\000\010\026\075\034\uffdc\035\uffdc" +
    "\001\002\000\006\026\075\035\uffe4\001\002\000\004\035" +
    "\uffbb\001\002\000\006\035\uffdb\047\157\001\002\000\004" +
    "\035\uffda\001\002\000\006\034\ufff3\040\ufff3\001\002\000" +
    "\006\036\021\037\017\001\002\000\004\034\ufff6\001\002" +
    "\000\032\003\043\004\035\007\uffef\010\047\012\026\013" +
    "\037\014\040\035\uffb3\036\030\037\041\041\046\043\033" +
    "\001\002\000\004\007\224\001\002\000\012\036\ufff9\037" +
    "\ufff9\042\ufff9\044\ufff9\001\002\000\032\003\043\004\035" +
    "\007\uffef\010\047\012\026\013\037\014\040\035\uffb3\036" +
    "\030\037\041\041\046\043\033\001\002\000\004\007\227" +
    "\001\002\000\004\002\uffff\001\002\000\004\033\231\001" +
    "\002\000\010\034\232\036\021\037\017\001\002\000\004" +
    "\042\240\001\002\000\004\034\234\001\002\000\004\042" +
    "\235\001\002\000\032\003\043\004\035\007\uffef\010\047" +
    "\012\026\013\037\014\040\035\uffb3\036\030\037\041\041" +
    "\046\043\033\001\002\000\004\007\237\001\002\000\012" +
    "\036\ufffc\037\ufffc\042\ufffc\044\ufffc\001\002\000\032\003" +
    "\043\004\035\007\uffef\010\047\012\026\013\037\014\040" +
    "\035\uffb3\036\030\037\041\041\046\043\033\001\002\000" +
    "\004\007\242\001\002\000\012\036\ufffb\037\ufffb\042\ufffb" +
    "\044\ufffb\001\002\000\004\033\244\001\002\000\010\034" +
    "\245\036\021\037\017\001\002\000\004\042\253\001\002" +
    "\000\004\034\247\001\002\000\004\042\250\001\002\000" +
    "\032\003\043\004\035\007\uffef\010\047\012\026\013\037" +
    "\014\040\035\uffb3\036\030\037\041\041\046\043\033\001" +
    "\002\000\004\007\252\001\002\000\012\036\ufff8\037\ufff8" +
    "\042\ufff8\044\ufff8\001\002\000\032\003\043\004\035\007" +
    "\uffef\010\047\012\026\013\037\014\040\035\uffb3\036\030" +
    "\037\041\041\046\043\033\001\002\000\004\007\255\001" +
    "\002\000\012\036\ufff7\037\ufff7\042\ufff7\044\ufff7\001\002" +
    "\000\004\042\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\012\002\003\024\010\025\004\031\005\001" +
    "\001\000\002\001\001\000\006\024\255\025\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\017\027\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\041\004" +
    "\047\005\043\006\024\007\050\010\031\011\044\021\026" +
    "\022\030\023\035\032\033\001\001\000\002\001\001\000" +
    "\004\032\215\001\001\000\002\001\001\000\006\020\213" +
    "\033\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\212\013\063\014\064\015\070\016\057\017\067" +
    "\001\001\000\002\001\001\000\016\012\201\013\063\014" +
    "\064\015\070\016\057\017\067\001\001\000\002\001\001" +
    "\000\016\012\200\013\063\014\064\015\070\016\057\017" +
    "\067\001\001\000\004\034\155\001\001\000\006\020\165" +
    "\033\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\053\004\047\005\043\006\024\007\050\010\031\011" +
    "\044\021\026\022\030\023\035\032\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\052\004\047\005" +
    "\043\006\024\007\050\010\031\011\044\021\026\022\030" +
    "\023\035\032\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\060\013\063\014\064\015\070\016\057" +
    "\017\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\072\013\063\014\064\015\070\016\057\017" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\075\014\064\015\070\016\057\017\067\001\001\000" +
    "\002\001\001\000\012\014\077\015\070\016\057\017\067" +
    "\001\001\000\002\001\001\000\010\015\123\016\057\017" +
    "\067\001\001\000\010\015\122\016\057\017\067\001\001" +
    "\000\010\015\121\016\057\017\067\001\001\000\006\016" +
    "\120\017\067\001\001\000\010\015\117\016\057\017\067" +
    "\001\001\000\010\015\116\016\057\017\067\001\001\000" +
    "\006\016\111\017\067\001\001\000\010\015\110\016\057" +
    "\017\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\115\001\001\000\004\017\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\134\013\063\014\064\015" +
    "\070\016\057\017\067\001\001\000\020\012\126\013\063" +
    "\014\064\015\070\016\057\017\067\030\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\012\126\013\063\014\064\015\070\016" +
    "\057\017\067\030\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\141\016\057\017\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\145\032\033\001" +
    "\001\000\004\034\155\001\001\000\002\001\001\000\016" +
    "\012\147\013\063\014\064\015\070\016\057\017\067\001" +
    "\001\000\002\001\001\000\006\007\151\032\033\001\001" +
    "\000\002\001\001\000\030\003\153\004\047\005\043\006" +
    "\024\007\050\010\031\011\044\021\026\022\030\023\035" +
    "\032\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\157\013\063\014\064\015\070" +
    "\016\057\017\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\162\013\063\014\064\015\070\016\057" +
    "\017\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\170\033\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\126" +
    "\013\063\014\064\015\070\016\057\017\067\030\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\203\004" +
    "\047\005\043\006\024\007\050\010\031\011\044\021\026" +
    "\022\030\023\035\032\033\001\001\000\002\001\001\000" +
    "\030\003\206\004\047\005\043\006\024\007\050\010\031" +
    "\011\044\021\026\022\030\023\035\032\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\211\013\063\014\064\015\070\016\057\017\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\220\027\015\001\001\000\002\001\001\000\030" +
    "\003\222\004\047\005\043\006\024\007\050\010\031\011" +
    "\044\021\026\022\030\023\035\032\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\225\004\047\005" +
    "\043\006\024\007\050\010\031\011\044\021\026\022\030" +
    "\023\035\032\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\232\027\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\235\004\047\005\043\006\024\007\050\010\031" +
    "\011\044\021\026\022\030\023\035\032\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\240\004\047" +
    "\005\043\006\024\007\050\010\031\011\044\021\026\022" +
    "\030\023\035\032\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\245\027\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\250\004\047\005\043\006\024\007\050\010" +
    "\031\011\044\021\026\022\030\023\035\032\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\253\004" +
    "\047\005\043\006\024\007\050\010\031\011\044\021\026" +
    "\022\030\023\035\032\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 	public boolean error = false;
	public void	syntax_error(Symbol cur_token){
		System.err.println("[Error Sintatico]: Linea "+ cur_token.value );
		error = true;
	}
	
	public boolean getError(){
		return error;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	public int lineanum=0;
	public boolean error = false;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sent_for_stmt ::= 
            {
              NodoBase RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sent_for_stmt ::= FOR LPAREN assign_stmt SEMI exp SEMI assign_stmt RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase asig = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pasoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pasoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase paso = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NodoFor(cuerpo,ex,asig,paso);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // array ::= ID BRALEFT exp BRARIGHT 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new NodoIdentificador(variable.toString(),ex,null);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // decl_part ::= ID BRALEFT NUM BRARIGHT 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				RESULT = new NodoIdentificador(variable.toString(),valor);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_part",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // decl_part ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				RESULT = new NodoIdentificador(variable.toString()); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_part",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // var_list ::= decl_part 
            {
              NodoBase RESULT =null;
		int dpartleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpartright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dpart = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 15c"); 
				RESULT= dpart;		
				
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // var_list ::= decl_part COMMA var_list 
            {
              NodoBase RESULT =null;
		int dpartleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dpartright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase dpart = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase variables = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 15a");
				if(modoDepuracion)
					System.out.println("Construyendo Nodo ID ");
				
				RESULT = new NodoIdentificador(dpart, variables);		
				
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // boolean_stmt ::= BOOLEAN var_list 
            {
              NodoBase RESULT =null;
		int variables_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variables_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase variables_list = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 14");
					RESULT = new NodoDeclaracion("Boolean",variables_list);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // int_stmt ::= INT var_list 
            {
              NodoBase RESULT =null;
		int variables_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variables_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase variables_list = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 13");
					RESULT = new NodoDeclaracion("Int",variables_list); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= error 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla 12f"); 
				if(modoDepuracion)
					System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= FALSE 
            {
              NodoBase RESULT =null;
		 RESULT= new NodoValor(0,1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= TRUE 
            {
              NodoBase RESULT =null;
		  RESULT= new NodoValor(1,1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= ID LPAREN args_II_stmt RPAREN 
            {
              NodoBase RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase arg = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 12e");
					RESULT = new NodoCallFuncion (nom,arg);
					
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(modoDepuracion) System.out.println("\t regla 12d");
					RESULT = new NodoCallFuncion (nom);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= MINUS ID 
            {
              NodoBase RESULT =null;
		int opmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if(modoDepuracion) System.out.println("\t regla 27b");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= MINUS NUM 
            {
              NodoBase RESULT =null;
		int opmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 27a"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(0-valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= MINUS LPAREN simple_exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 12a"); 
							RESULT = ex;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= ID BRALEFT exp BRARIGHT 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						if(modoDepuracion) System.out.println("\t regla 12d"); 
						RESULT=new NodoIdentificador(variable,ex,null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 12c"); 
					if(variable!=null){
						if(modoDepuracion)
							System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 12b"); 
					if(valor!=null){
						RESULT= new NodoValor(valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 12a"); 
							RESULT = ex;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11c"); 
					RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10c"); 
				RESULT=ex;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp_logica ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9g"); 
					RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp_logica ::= simple_exp LE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9f"); 
							RESULT = new NodoOperacion(exI,tipoOp.menorigual,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp_logica ::= simple_exp GE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9e"); 
							RESULT = new NodoOperacion(exI,tipoOp.mayorigual,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp_logica ::= simple_exp NE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9c"); 
							RESULT = new NodoOperacion(exI,tipoOp.noigual,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp_logica ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp_logica ::= simple_exp GT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9d"); 
							RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp_logica ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp_and ::= exp_logica 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9a");
                                                               RESULT = ex;
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_and",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp_and ::= exp_and AND exp_logica 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9a");
                                                               RESULT = new NodoOperacion(exI,tipoOp.and,exD);
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_and",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp_and 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9a"); 
								RESULT = ex;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp OR exp_and 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.or,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // write_stmt ::= WRITE exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 8"); 
					RESULT= new NodoEscribir(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // read_stmt ::= READ array 
            {
              NodoBase RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase vector = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				    if(vector!=null)
				    RESULT= new NodoLeer(vector);
				    else{
				    RESULT=null;
				    if(modoDepuracion)
				    	System.out.println("Ocurrio error en cup # 0003");
				    }
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // read_stmt ::= READ ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 7"); 
					if(modoDepuracion)
						System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;if(modoDepuracion)
						System.out.println("Ocurrio error en cup # 0002");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assign_stmt ::= array ASSIGN exp 
            {
              NodoBase RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase vector = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				RESULT=new NodoAsignacion(vector,ex); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assign_stmt ::= ID NT$0 ASSIGN exp 
            {
              NodoBase RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$0 ::= 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(modoDepuracion) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if_stmt ::= IF exp THEN stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= error 
            {
              NodoBase RESULT =null;
		 
            if(modoDepuracion){ System.out.println("\t regla 3l"); 
                     System.out.println("Ocurrio error en cup # 0004");
            }
				
				this.error = true;
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= RETURN 
            {
              NodoBase RESULT =null;
				if(modoDepuracion) System.out.println("\t regla 3k");
            		RESULT= new NodoReturn(null);
            	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= RETURN exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				if(modoDepuracion) System.out.println("\t regla 3j");
            		RESULT= new NodoReturn(ex);
            	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= ID LPAREN args_II_stmt RPAREN 
            {
              NodoBase RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase arg = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 3i");
					RESULT = new NodoCallFuncion (nom,arg);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(modoDepuracion) System.out.println("\t regla 3h");
					RESULT = new NodoCallFuncion (nom);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= sent_for_stmt 
            {
              NodoBase RESULT =null;
		int sforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sfor; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= boolean_stmt 
            {
              NodoBase RESULT =null;
		int sbooleanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sbooleanright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sboolean = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3g");
					RESULT=sboolean; 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= int_stmt 
            {
              NodoBase RESULT =null;
		int sintleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sintright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sint = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3f");
					RESULT=sint; 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3e"); 
					RESULT=sesc;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3d"); 
					RESULT=slec;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3c"); 
						RESULT=sasi;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3b"); 
						RESULT=srep;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3a"); 
					RESULT=sif;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt_seq ::= 
            {
              NodoBase RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt_seq ::= stmt SEMI stmt_seq 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = sent;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(ini);
							RESULT=sent;
						}else{
							RESULT=ini;
						}	
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // args_II_stmt ::= exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 26b");
					RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_II_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // args_II_stmt ::= exp COMMA args_II_stmt 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase argume = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 26a");
					NodoBase hijoActual = ex;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(argume);
							RESULT=ex;
						}else{
							RESULT=argume;
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_II_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec_stmt ::= BOOLEAN ID 
            {
              NodoBase RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 25a");
					NodoIdentificador x = new NodoIdentificador(iden);
					RESULT = new NodoDeclaracion("Boolean",(NodoBase)(x));
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dec_stmt ::= INT ID 
            {
              NodoBase RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 25a");					
					NodoIdentificador x = new NodoIdentificador(iden);
					RESULT = new NodoDeclaracion("Int",(NodoBase)(x));
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // args_stmt ::= dec_stmt 
            {
              NodoBase RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 24b");
					RESULT = d;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // args_stmt ::= dec_stmt COMMA args_stmt 
            {
              NodoBase RESULT =null;
		int arguleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arguright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase argu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase lista = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 24a");
					NodoBase hijoActual = argu;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(lista);
							RESULT=argu;
						}else{
							RESULT=lista;
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_f_stmt ::= VOID ID LPAREN RPAREN BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase set = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 23b");
					RESULT= new NodoFuncion("Void",nom,set);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_f_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_f_stmt ::= VOID ID LPAREN args_stmt RPAREN BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase arg = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase set = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 23a");
					RESULT= new NodoFuncion("Void",nom,arg,set);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_f_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_f_stmt ::= INT ID LPAREN RPAREN BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase set = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 22b");
					RESULT= new NodoFuncion("Int",nom,set);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_f_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type_f_stmt ::= INT ID LPAREN args_stmt RPAREN BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase arg = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase set = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 22a");
					RESULT= new NodoFuncion("Int",nom,arg,set);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_f_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type_f_stmt ::= BOOLEAN ID LPAREN RPAREN BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase set = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 22b");
					RESULT= new NodoFuncion("Boolean",nom,set);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_f_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type_f_stmt ::= BOOLEAN ID LPAREN args_stmt RPAREN BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase arg = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase set = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 22a");
					RESULT= new NodoFuncion("Boolean",nom,arg,set);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_f_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fuctions_stmt ::= 
            {
              NodoBase RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fuctions_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fuctions_stmt ::= type_f_stmt fuctions_stmt 
            {
              NodoBase RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase funcion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase funciones = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(modoDepuracion) System.out.println("\t regla 20");
						NodoBase hijoActual = funcion;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(funciones);
							RESULT=funcion;
						}else{
							RESULT=funciones;
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fuctions_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // strut_stmt ::= fuctions_stmt BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase fun = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase main = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 0");
									
					RESULT= new NodoProgram(fun,main);										
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("strut_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= strut_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				ast = s;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

